package require tcltest
package require Expect

namespace eval ::simulator::test {
  namespace import ::tcltest::*

  variable TEST_BUCKET_NAME "controlplane-simulator-state-automated-test"
  # Careful if you adjust this it will be clobbered with an empty file before every test
  variable TEST_CONFIG_NAME "simulator-automated-test.yaml"

  variable BEFORE {
    puts "Test setup"
    catch { unset result }
    close [open $TEST_CONFIG_NAME w]
    set env(SIMULATOR_SCENARIOS_DIR) "./test/fixtures/valid"
    set env(SIMULATOR_TF_DIR) "./test/fixtures/noop-tf-dir"
    set env(SIMULATOR_CLI_TEST_OUTPUT) "./test/test.debug"
    set env(AWS_REGION) "eu-west-1"
    set env(AWS_DEFAULT_REGION) "eu-west-1"
  }

  variable AFTER {
    puts "Test teardown"
    unset env(SIMULATOR_SCENARIOS_DIR)
    unset env(SIMULATOR_TF_DIR)
    unset env(SIMULATOR_CLI_TEST_OUTPUT)
  }

  test version_prints_ok {
    Test: simulator version
  } -body {
    spawn "simulator" "version"
    expect "build date" { set result 1 } default { set result 0 }
  } -setup $BEFORE -cleanup $AFTER -result 1

  test infra_create_prints_ok {
    Test: simulator infra create
  } -body {
    spawn "simulator" "infra" "create"
    expect "testing = testing" { set result 1 } default { set result 0 }
  } -setup $BEFORE -cleanup $AFTER -result 1

  # TODO: (rem) Need to stub terraform output to make this pass
  configure -skip "scenario_launch_prints_ok infra_status_prints_ok"

  test infra_status_prints_ok {
    Test: simulator infra status
  } -body {
    spawn "simulator" "infra" "status"
    expect "testing = testing" { set result 1 } default { set result 0 }
  } -setup $BEFORE -cleanup $AFTER -result 1

  test scenario_list_prints_ok {
    Test: simulator scenario list
  } -body {
    spawn "simulator" "scenario" "list"
    expect "Scenario 1" { set result 1 } default { set result 0 }
  } -setup $BEFORE -cleanup $AFTER -result 1

  test scenario_launch_prints_ok {
    Test: simulator scenario launch scenario_1
  } -body {
    spawn "simulator" "scenario" "launch" "scenario_1"
    expect "Scenario 1" { set result 1 } default { set result 0 }
  } -setup $BEFORE -cleanup $AFTER -result 1

  test init_with_valid_bucket {
    Test: simulator init with valid unused bucket name
  } -body {
    spawn "simulator" "init" "-c" $TEST_CONFIG_NAME

    expect  {
      timeout { send_user "Timed out getting S3 bucket name prompt" }
      eof { send_user "simulator init failed" }
      "name for an S3 bucket to store the terraform state: " {
        send "${TEST_BUCKET_NAME}\r"
      }
    }

    expect {
      timeout { exp_continue }
      eof { set result 0 }
      "Saving state bucket name to config" { set result 1 }
      default { set result 0 }
    }
  } -setup $BEFORE -cleanup {
    spawn aws s3 rb s3://$TEST_BUCKET_NAME --force
  } -result 1

  cleanupTests 1
}
namespace delete ::simulator::test

# vim: ft=tcl

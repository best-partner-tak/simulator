#!/bin/bash
#
# Kind start wrapper script
#
# Author : Jon Kent

set -euo pipefail

scenarioName=${1:-1}

if [ "${scenarioName}" == 1 ]; then
	echo "Missing scenario name, e.g."
	echo "${0} shadow_secret"
	exit 1
fi

[ -x "$(command -v curl)" ] || { echo "curl not installed, please install"; exit 1; }

if [[ ${OSTYPE} =~ ^darwin* ]]; then
	kindType="kind-darwin-amd64"
elif [[ ${OSTYPE} =~ ^linux-gnu* ]]; then
	kindType="kind-linux-amd64"
else
	echo "OS not currently supported"
fi

dirName="$( cd "$( dirname "${BASH_SOURCE[0]}")" && pwd )"
# shellcheck disable=SC2001
# shellcheck disable=SC2086
belowDir="$(echo ${dirName} | sed -e 's/kind//g')"
scenarioDir="${belowDir}/simulation-scripts/scenario/${scenarioName}/apply"

config="${dirName}/config"
binaries="${dirName}/bin"

latestKind="$(curl -sX GET https://api.github.com/repos/kubernetes-sigs/kind/releases | grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/'|head -1)"

echo "Downloading kind version ${latestKind} "$'\342\254\207'

curl -sLo ./"${kindType}" https://github.com/kubernetes-sigs/kind/releases/download/"${latestKind}"/"${kindType}"
chmod +x ./"${kindType}"
mv ./"${kindType}" "${binaries}"/kind

export PATH="${binaries}":"${PATH}"

exit

echo "Starting kind "$'\360\237\220\263'
kind create cluster --config "${config}"/simple-cluster.yaml

# shellcheck disable=SC2155
export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"

echo -n "Waiting for cluster to initialise"

for i in $(seq 1 30); do
	echo -n $'\342\232\231'"  "
	sleep 1
done

echo; echo "Hopefully running"

echo "Applying scenario ${scenarioName}"

# shellcheck disable=SC2045
for i in $(ls "${scenarioDir}"); do
	echo "Applying ${i}" $'\360\237\222\243'
	kubectl apply -f "${scenarioDir}/${i}"
done 

kubectl cluster-info
kubectl get nodes
kubectl get pods --all-namespaces

echo "Run export KUBECONFIG="\"\$\(kind get kubeconfig-path --name=\"kind\"\)\"""
echo "to access the cluster with kubectl"

